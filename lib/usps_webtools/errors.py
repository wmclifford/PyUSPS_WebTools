#!/usr/bin/env python
'''
File			:	errors.py
Package			:	usps_webtools
Brief			:	Exposes an error response class for handling errors returned
					by the USPS server.
Author			:	William M. Clifford
--------------------------------------------------------------------------------
'''

# Import our ResponseBase class for subclassing.
from usps_webtools.base import ResponseBase

# Let's also get our utility function for parsing the XML response.
from usps_webtools.utility import getXmlElementContents

#-------------------------------------------------------------------------------
# class: ErrorResponse
# inherits: usps_webtools.base.ResponseBase
#
# Description:
#	Embodies an error response received from the USPS web server, exposing to
#	the user the description, error number, and source function where the
#	error took place.
#
# Public properties:
#
#	description - string; a description of the error returned by the server
#
#	number - string; the error number returned by the server
#
#	source - string; the source function that generated the error
#
# Protected methods:
#
#	_parseElement(elem) - See usps_webtools.base.ResponseBase
#
#-------------------------------------------------------------------------------
class ErrorResponse(ResponseBase):
	'''
	Wraps an XML error response generated by the USPS webtools API, allowing
	access to the error number, source, and description given by the USPS
	server.
	'''
	
	def __init__(self, xmlElement):
		'''
		Constructor - expects to be provided an XPATH element that represents
		an error response from the USPS server ( <Error>...</Error> ).
		'''
		self.__description = ''
		self.__number = ''
		self.__source = ''
		self._parseElement(xmlElement)
		return
	
	def __str__(self):
		'''
		Nice string representation of the error response, useful for displaying
		to end user or logging.
		'''
		return '''ErrorResponse:
	Number		: %(_ErrorResponse__number)s
	Source		: %(_ErrorResponse__source)s
	Description	: %(_ErrorResponse__description)s
''' % self.__dict__
	
	#
	# Properties
	#
	
	@property
	def description(self):
		return self.__description
	
	@property
	def number(self):
		return self.__number
	
	@property
	def source(self):
		return self.__source
	
	#
	# Protected Methods
	#
	
	def _parseElement(self, elem):
		'''
		Parses the provided XML element, filling the fields of the object with
		the data in the XML element.
		'''
		if not elem:
			return
		if elem.name != 'Error':
			return
		self.__number = getXmlElementContents(elem, './Number')
		self.__source = getXmlElementContents(elem, './Source')
		self.__description = getXmlElementContents(elem, './Description')
		return
	
	pass

